1
import numpy as np 
import matplotlib.pyplot as plt 
import pandas as pd 

dataset = pd.read_csv('Social_Network_Ads.csv') 

X = dataset.iloc[:, [2, 3]].values 
y = dataset.iloc[:, -1].values 

dataset.head()
dataset.describe()
dataset.info()
dataset.isnull().sum()


from sklearn.model_selection import train_test_split 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25) 

print("Size of X-training data: ",X_train.shape) 
print("Size of Y-training data: ",y_train.shape) 
print("Size of X-testing data: ",X_test.shape) 
print("Size of Y-testing data: ",y_test.shape) 

# from sklearn.model_selection import train_test_split 
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20,random_state=42) # # # print('X train shape: ', X_train.shape) 
# print('Y train shape: ', y_train.shape) 
# print('X test shape: ', X_test.shape) 
# print('Y test shape: ', y_test.shape) 

# Equalize all the values (In same value variation)
from sklearn.preprocessing import StandardScaler 
sc = StandardScaler() 
X_train = sc.fit_transform(X_train) 
X_test = sc.transform(X_test) 


# Calling callisifier
from sklearn.neighbors import KNeighborsClassifier # k =1 
classifier = KNeighborsClassifier(n_neighbors = 1, metric = 'minkowski', p = 2) classifier.fit(X_train, y_train) # Traning the model (Something to modle with)

# Predict the test value
y_pred = classifier.predict(X_test) 

# Accuracy of the model
from sklearn.metrics import confusion_matrix, accuracy_score 
cm = confusion_matrix(y_test, y_pred) 
ac = accuracy_score(y_test, y_pred) 
print("confusion_matrix \n", cm) 
print("accuracy of the model is: ", ac) 

# Finding value of K
neighbors = np.arange(1, 9) 
train_accuracy = np.empty(len(neighbors)) 
test_accuracy = np.empty(len(neighbors)) 
# Loop over K values 
for i, k in enumerate(neighbors): 
        knn = KNeighborsClassifier(n_neighbors=k) 
        knn.fit(X_train, y_train) 

        # Compute training and test data accuracy 
        train_accuracy[i] = knn.score(X_train, y_train) 
        test_accuracy[i] = knn.score(X_test, y_test) 


# Generate plot 
plt.plot(neighbors, test_accuracy, label = 'Testing dataset Accuracy') 
#plt.plot(neighbors, train_accuracy, label = 'Training dataset Accuracy') 
plt.legend() 
plt.xlabel('n_neighbors') 
plt.ylabel('Accuracy') 
plt.show() %  


2
# -*- coding: utf-8 -*-
"""
Created on Tue Jul  5 12:43:49 2022

@author: prana
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv("UniversalBank.csv")

x = data.drop(['ID',"CreditCard"], axis=1)
y = data.iloc[:, -1].values

data.head()
data.describe()
data.info()
data.isnull().sum()

#Split values
from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x,y, test_size=0.20, random_state=42)
print("\n\nXtrain: ", xtrain.shape)
print("Xtest: ", xtest.shape)
print("Ytrain: ", ytrain.shape)
print("Ytest: ", ytest.shape)


#Feature scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
xtrain = sc.fit_transform(xtrain)
xtest = sc.transform(xtest)


#For buildding the model
from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors = 18, metric="minkowski", p=2)
classifier.fit(xtrain, ytrain)

ypred = classifier.predict(xtest)

#Confusion matrix and prediction
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(ytest, ypred)
ac = accuracy_score(ytest, ypred)
print("\nConfusion Matrix: ", cm)
print("\nAccuracy Score: ", ac)


#-----------------
#plotting elbow method graph
neighbors = np.arange(1,20)
train_accuracy = np.empty(len(neighbors))
test_accuracy = np.empty(len(neighbors))

for i,k in enumerate(neighbors):
    knn = KNeighborsClassifier(n_neighbors = k)
    knn.fit(xtrain, ytrain)
    
    train_accuracy[i] = knn.score(xtrain, ytrain)
    test_accuracy[i] = knn.score(xtest, ytest)
    
plt.plot(neighbors, train_accuracy, label="Train Accuracy")
plt.plot(neighbors, test_accuracy, label="Test Accuracy")
plt.legend()
plt.xlabel("n_neighbors")
plt.ylabel("Accuracy")
plt.show()



